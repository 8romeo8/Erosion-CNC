#include "DxfParser.h"
#include <cmath>
#include <iostream>
#include <cctype>

// Для математических констант (M_PI)
#define _USE_MATH_DEFINES
#include <cmath>


class DxfParser {
public:
    void parse(const std::string& filePath, std::vector<P>* ToolDraw) {
        std::ifstream file(filePath);
        if (!file.is_open()) {
            std::cerr << "Error opening file: " << filePath << std::endl;
            return;
        }

        std::string line;
        bool inEntities = false;
        bool inBlock = false;

		while (std::getline(file, line)) {
            trim(line);

            if (line == "0") {
				std::string entityType;
				while (std::getline(file, entityType))
				{
							trim(entityType);

							if (entityType == "SECTION") {
								handleSection(file, inEntities, inBlock);
							}
							else if (inEntities && !inBlock) {
								if (entityType == "LINE") {
									handleLine(file, ToolDraw);
								}
								else if (entityType == "ARC") {
									handleArc(file, ToolDraw);
								}
								else if (entityType == "CIRCLE") {
									handleCircle(file, ToolDraw);
								}
								else if (entityType == "LWPOLYLINE") {
									handleLwPolyline(file, ToolDraw);
								}
								else if (entityType == "BLOCK") {
									inBlock = true;
								}
								else if (entityType == "ENDBLK") {
									inBlock = false;
								}
							}
                }
            }
        }
    }

private:
    void trim(std::string& str) {
        auto start = str.begin();
        while (start != str.end() && std::isspace(*start)) {
            start++;
        }

        auto end = str.end();
        while (end != start && std::isspace(*(end - 1))) {
            end--;
        }

        str = std::string(start, end);
    }

    void handleSection(std::ifstream& file, bool& inEntities, bool& inBlock) {
        std::string code, value;
        if (std::getline(file, code)) {
            trim(code);
            if (code == "2" && std::getline(file, value)) {
                trim(value);
                inEntities = (value == "ENTITIES");
                inBlock = false;
            }
        }
    }

    void handleLine(std::ifstream& file, std::vector<P>* ToolDraw) {
        double x1 = 0, y1 = 0, x2 = 0, y2 = 0;
        std::string code, value;

        while (true) {
            if (!std::getline(file, code)) break;
            trim(code);
            if (code == "0") break;

            if (!std::getline(file, value)) break;
            trim(value);

            if (code == "10") x1 = safeStod(value);
            else if (code == "20") y1 = safeStod(value);
            else if (code == "11") x2 = safeStod(value);
            else if (code == "21") y2 = safeStod(value);
        }

        ToolDraw->push_back({x1, y1, x2, y2, 0, 0, '1'});
    }

    void handleArc(std::ifstream& file, std::vector<P>* ToolDraw) {
        double cx = 0, cy = 0, cz = 0, r = 0, startAngle = 0, endAngle = 0;
        std::string code, value;

        while (true) {
            if (!std::getline(file, code)) break;
            trim(code);
            if (code == "0") break;

            if (!std::getline(file, value)) break;
            trim(value);

            if (code == "10") cx = safeStod(value);
            else if (code == "20") cy = safeStod(value);
            else if (code == "30") cz = safeStod(value);  // Учитываем Z-координату
            else if (code == "40") r = safeStod(value);
            else if (code == "50") startAngle = safeStod(value);
            else if (code == "51") endAngle = safeStod(value);
        }

        // Исправленный расчёт координат дуги
        double startRad = startAngle * M_PI / 180.0;
        double endRad = endAngle * M_PI / 180.0;

        double x1 = cx + r * std::cos(startRad);
        double y1 = cy + r * std::sin(startRad);
        double x2 = cx + r * std::cos(endRad);
        double y2 = cy + r * std::sin(endRad);

        // Корректный расчёт центра дуги
        double i = cx - x1;
        double j = cy - y1;

        ToolDraw->push_back({x1, y1, x2, y2, i, j, '2'});
    }

    void handleCircle(std::ifstream& file, std::vector<P>* ToolDraw) {
        double cx = 0, cy = 0, r = 0;
        std::string code, value;

        while (true) {
            if (!std::getline(file, code)) break;
            trim(code);
            if (code == "0") break;

            if (!std::getline(file, value)) break;
            trim(value);

            if (code == "10") cx = safeStod(value);
            else if (code == "20") cy = safeStod(value);
            else if (code == "40") r = safeStod(value);
        }

        ToolDraw->push_back({cx + r, cy, cx + r, cy, -r, 0, '3'});
    }

    void handleLwPolyline(std::ifstream& file, std::vector<P>* ToolDraw) {
        int flags = 0, vertexCount = 0;
        std::vector<double> vertices;
        std::vector<double> bulges;
        std::string code, value;

        while (true) {
            if (!std::getline(file, code)) break;
            trim(code);
            if (code == "0") break;

            if (!std::getline(file, value)) break;
            trim(value);

            if (code == "70") flags = std::stoi(value);
            else if (code == "90") vertexCount = std::stoi(value);
            else if (code == "10") vertices.push_back(safeStod(value));
            else if (code == "20") vertices.push_back(safeStod(value));
            else if (code == "42") bulges.push_back(safeStod(value));
        }

        if (vertexCount < 2) return;

        // Дополняем bulges нулями до размера vertexCount
        if (bulges.size() < static_cast<size_t>(vertexCount)) {
            bulges.resize(vertexCount, 0.0);
        }

        bool isClosed = flags & 1;
        size_t count = isClosed ? vertexCount : vertexCount - 1;

        for (size_t i = 0; i < count; i++) {
            size_t nextIdx = (i + 1) % vertexCount;
            double x1 = vertices[i * 2];
            double y1 = vertices[i * 2 + 1];
            double x2 = vertices[nextIdx * 2];
            double y2 = vertices[nextIdx * 2 + 1];
            double bulge = (i < bulges.size()) ? bulges[i] : 0.0;

            if (std::abs(bulge) < 1e-9) {
                ToolDraw->push_back({x1, y1, x2, y2, 0, 0, '1'});
            }
            else {
                double chordLength = std::hypot(x2 - x1, y2 - y1);
                double sagitta = std::abs(bulge) * chordLength / 2.0;
                double radius = (chordLength * chordLength) / (8.0 * sagitta) + sagitta / 2.0;

                double angle = 4.0 * std::atan(std::abs(bulge));
                double chordAngle = std::atan2(y2 - y1, x2 - x1);
                double centerAngle = chordAngle + (bulge > 0 ? M_PI / 2.0 : -M_PI / 2.0) - angle / 2.0;

                double cx = x1 + radius * std::cos(centerAngle);
                double cy = y1 + radius * std::sin(centerAngle);

                double i_val = cx - x1;
                double j_val = cy - y1;

                ToolDraw->push_back({x1, y1, x2, y2, i_val, j_val, '2'});
            }
        }
    }

    double safeStod(const std::string& str) {
        try {
            return std::stod(str);
        }
        catch (...) {
            std::cerr << "Conversion error for value: " << str << std::endl;
            return 0.0;
        }
    }
};
