//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "Unit1.h"

#include "DxfParser.h"

#include <fstream>
#include <string>
#include <vector>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <sstream>
#include <cctype>

#define _USE_MATH_DEFINES
#include <cmath>

//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm1 *Form1;
//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
	: TForm(Owner)
{
}
//---------------------------------------------------------------------------

///////////////////////////////////  END DXF FILE  ///////////////////////////

void __fastcall TForm1::BitBtn3Click(TObject *Sender)
{
	std::vector<P> ToolDraw;
	DxfParser parser;

	OpenDialog1->FileName = "";
	OpenDialog1->Execute();



	Memo1->Clear(); // Очищаем memo перед выводом новых данных
	AnsiString ansiPath = OpenDialog1->FileName;
	parser.parse(ansiPath.c_str(), &ToolDraw);

		int entityCount = static_cast<int>(ToolDraw.size());

		Memo1->Lines->Add("Parsed " + IntToStr(entityCount) + " entities:");
		Memo1->Lines->Add("--------------------------------------");
		for (int i = 0; i < ToolDraw.size(); i++) {
			 AnsiString str = " Line = " + String(ToolDraw[i].lineOrCircle);
			 str += "\r\n";
			 str += "X=" + String().FormatFloat("0.###",ToolDraw[i].x1);
			 str += "  Y=" + String().FormatFloat("0.###",ToolDraw[i].y1);
			 str += "  X2=" + String().FormatFloat("0.###",ToolDraw[i].x2);
			 str += "  Y2=" + String().FormatFloat("0.###",ToolDraw[i].y2);
			 str += "  I=" + String().FormatFloat("0.###",ToolDraw[i].i);
			 str += "  J=" + String().FormatFloat("0.###",ToolDraw[i].j);
             str += "\r\n";
			  Memo1->Lines->Add(str);
		}
		/*
		for (const auto& entity : ToolDraw) {
			String type;
			switch(entity.lineOrCircle) {
				case '1': type = "LINE"; break;
                case '2': type = "ARC CW"; break;
                case '3': type = "ARC CCW"; break;
                default: type = "UNKNOWN";
            }

            String info = String().sprintf(
				L"Type: %s\nX: %.3f\nY: %s\nX2: %.3f\nY2: %.3f\nI: %.3f\nJ\n-------------------",
                type.c_str(),
				entity.x1,
				entity.y1,
				entity.x2,
				entity.y2,
				entity.i,
                entity.j
            );

			Memo1->Lines->Add(info);
        }
         */
}
//---------------------------------------------------------------------------
