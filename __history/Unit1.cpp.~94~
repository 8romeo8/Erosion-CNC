//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "Unit1.h"

#include "DxfParser.h"   // Парсер dxf
#include "DrawOrderer.h" //Сортировка по стыкам
#include "GraphicsBuilder.h"

#include <fstream>
#include <string>
#include <vector>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <sstream>
#include <cctype>

#define _USE_MATH_DEFINES
#include <cmath>

//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm1 *Form1;

//Обьвяим глобальные данные
std::vector<DxfPos> ToolDrawConvertDXF;  //Суда положу данные взятые из загруженного файла DXF
DrawOrderer *orderer = nullptr;      //Класс выполняющий стыковку обьектов
GraphicsBuilder* builder = nullptr; // Данные отрисовки
std::vector<DrawOrderer::OrderStruct> orderedPath ;

bool isInitialized = false;

//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
	: TForm(Owner)
{
    SetWindowLong(ToolPath->Parent->Handle, GWL_EXSTYLE,
	GetWindowLong(ToolPath->Parent->Handle, GWL_EXSTYLE) | WS_EX_COMPOSITED);
}
//---------------------------------------------------------------------------

void __fastcall TForm1::ToolPathDrawPaint(TObject *Sender)
{

	TRect drawArea = ToolPathDraw->ClientRect;
	TCanvas* canvas = ToolPathDraw->Canvas;

  if (builder != nullptr) {
		// Первичная настройка (вызывается один раз)
		if (!isInitialized) {
			builder->fitToView(drawArea);
			isInitialized = true;
		}

		builder->paint(canvas, drawArea);
	}
}
//---------------------------------------------------------------------------

void __fastcall TForm1::FormDestroy(TObject *Sender)
{
        delete builder;
}
//---------------------------------------------------------------------------

void __fastcall TForm1::ToolPathDrawMouseDown(TObject *Sender, TMouseButton Button,
          TShiftState Shift, int X, int Y)
{
	if (builder != nullptr && Button == mbLeft) {
			 builder->mouseDown(X, Y);
			 ToolPathDraw->Invalidate(); // Перерисовываем
	}
}
//---------------------------------------------------------------------------

void __fastcall TForm1::ToolPathDrawMouseMove(TObject *Sender, TShiftState Shift,
          int X, int Y)
{
	if (builder != nullptr) {
			builder->mouseMove(X, Y);
			ToolPathDraw->Invalidate(); // Перерисовка
	}
}
//---------------------------------------------------------------------------

void __fastcall TForm1::ToolPathDrawMouseUp(TObject *Sender, TMouseButton Button,
          TShiftState Shift, int X, int Y)
{
	if (builder != nullptr) {
		builder->mouseUp();
	}
}
//---------------------------------------------------------------------------

void __fastcall TForm1::FormMouseWheel(TObject *Sender, TShiftState Shift, int WheelDelta,
          TPoint &MousePos, bool &Handled)
{
	if (builder != nullptr) {
		builder->mouseWheel(WheelDelta, MousePos.x, MousePos.y);
		ToolPathDraw->Invalidate();
		Handled = true;
    }
}
//---------------------------------------------------------------------------

void __fastcall TForm1::FormCreate(TObject *Sender)
{
	//Подрубим двойнуюу буфферизацию отрисовке
    ToolPath->Parent->DoubleBuffered = true;
}
//---------------------------------------------------------------------------
//Таймер отвечает за активность кнопок
void __fastcall TForm1::UpdateDrawTimer(TObject *Sender)
{
	// Получаем текущее состояние
	Status currentState;
	if(builder)
	{
		currentState = builder->machineState.getState();

		// Получаем битовую маску для этого состояния
		uint16_t buttonMask = builder->machineState.getButtonMask(currentState);

		BtnLoadFile->Enabled 		= (buttonMask & State::BTN_LOAD_FILE) != 0;
		BtnZero->Enabled 			= (buttonMask & State::BTN_ZERO) != 0;
		BtnGoKadr->Enabled          = (buttonMask & State::BTN_GO_KADR) != 0;
		BtnSdvig->Enabled           = (buttonMask & State::BTN_SDVIG) != 0;
		BtnStopAngle->Enabled       = (buttonMask & State::BTN_STOP_ANGLE) != 0;
		BtnBeckWard->Enabled        = (buttonMask & State::BTN_BACKWARD) != 0;
		BtnForWadr->Enabled         = (buttonMask & State::BTN_FORWARD) != 0;
		BtnOnOffSoj->Enabled        = (buttonMask & State::BTN_ON_OFF_SOJ) != 0;
		BtnOnOffGeneric->Enabled    = (buttonMask & State::BTN_ON_OFF_GENERIC) != 0;
		BtnBarabanOnOff->Enabled    = (buttonMask & State::BTN_BARABAN_ON_OFF) != 0;
		BtnStop->Enabled            = (buttonMask & State::BTN_STOP) != 0;
		BtnStart->Enabled           = (buttonMask & State::BTN_START) != 0;
	}

}
//---------------------------------------------------------------------------

void __fastcall TForm1::BtnLoadFileClick(TObject *Sender)
{
	 if(builder->machineState.setState(DefaultState))
	 {

		DxfParser parser;

		OpenDialog1->FileName = "";
		OpenDialog1->Execute();

		AnsiString ansiPath = OpenDialog1->FileName;
		parser.parse(ansiPath.c_str(), &ToolDrawConvertDXF);

		// Упорядочиваем элементы
		orderer = new DrawOrderer(ToolDrawConvertDXF);
		orderedPath = orderer->createOrderedPath();

		// Удаляем старый builder, если был
		delete builder;
		builder = new GraphicsBuilder(orderedPath);
		isInitialized = false; // Сбрасываем флаг инициализации

		ToolPathDraw->Invalidate();
	 }else
	 {
	   //Ошибка перехода состояния
       ShowMessage("На данном этапе нельзя загрузить новую деталь. Сначала завершите все процессы.");

     }
}
//---------------------------------------------------------------------------


